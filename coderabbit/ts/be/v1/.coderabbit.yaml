# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: 'en-US'
tone_instructions: give formal and direct reviews with no humour and any other distracting text, only the necessary
chat:
    auto_reply: true
    art: false
reviews:
    profile: 'assertive'
    request_changes_workflow: true
    auto_review:
        enabled: true
        auto_incremental_review: true
        base_branches:
            - '^(?!release).*'
    poem: false
    high_level_summary: true
    suggested_labels: true
    auto_apply_labels: true
    labeling_instructions:
        - label: '⏱️ <10 Min Review'
          instructions: >-
              Apply this label if the pull request modifies fewer than 100 lines.

        - label: '⏱️ 10-30 Min Review'
          instructions: >-
              Apply this label if the pull request modifies between 100 and 500.

        - label: '⏱️ 30-60 Min Review'
          instructions: >-
              Apply this label if the pull request modifies between 500 and 1000 lines.

        - label: '⏱️ 60+ Min Review'
          instructions: >-
              Apply this label if the pull request changes more than 1000 lines.
    path_instructions:
        - path: 'src/**'
          instructions: |
              Follow the standardized folder structure:
                - controllers/
                - services/
                - gateways/
                - models/
                - validators/
                - middlewares/
                - cli/
                - config/
              Use plural camelCase names for module folders (e.g. `users`).
              Do not create unapproved top-level folders.

        - path: '**/*.js'
          instructions: |
              Prevent deeply nested callbacks; use async/await or Promises with flat structure.
              Prefer ES modules: use import syntax, avoid require; configure type: module in package.json; use .mjs for standalone modules if needed.
              Maintain file extension consistency: .mjs for ES-only modules; .cjs for CommonJS where interoperability is required.
              Enforce naming conventions: Classes in CamelCase; functions, methods, variables in camelCase (no abbreviations); constants in UPPER_CASE_WITH_UNDERSCORES.
              Document all classes, methods, and functions with JSDoc; descriptions optional if names are self-explanatory.
              Limit functions to a maximum of 4 parameters (never exceed 6); optional parameters must be last; destructure parameters where possible.
              Controllers must delegate to services, contain no business logic, and follow Single Responsibility Principle.
              Minimise inline comments; rely on clear naming and required JSDoc for documentation.
              Classes, Functions and Methods must be concise and have descriptive names.
              Don't use environment variables directly, declare them in the src/config/*.config.js file.
              Code should follow DRY and SOLID principles.
              Code should follow development best practices.

        - path: 'src/**/modules/*'
          instructions: |
              Use camelCase and plural naming for module folders (e.g. users, internalReports).
              Mirror directory structure: controllers, services, gateways, clients, cron, middlewares, models, validators, cli.

        - path: 'src/**/models/*.ts'
          instructions: |
              Define immutable domain models/value objects.
              Encapsulate validation and transformation logic within model classes.

        - path: 'src/**/validators/*.ts'
          instructions: |
              Use AJV or Joi for deep-object validation.
              Define JSON schema files or Joi schemas; reference them in controllers or services.

        - path: 'src/**/cli/**/*.ts'
          instructions: |
              Place CLI scripts under src/{module}/cli, named with colon format (e.g. user:import).
              Map npm script names in package.json under scripts.

        - path: 'package.json'
          instructions: |
              Include in scripts at minimum: start, test, lint, prettier, prettier:check, healthcheck, and Git hooks via prepare.
              Reference @oat-sa/prettier-config under prettier and @oat-sa/eslint-config-tao under eslintConfig.
              Declare engines for node >=18.15.0 and npm >=9.5.0 (or node >=22 and npm >=10 for new projects).
              Add devDependencies: sonarqube-scanner, sonarlint, ajv, joi, swagger-ui-express, vitest or jest as appropriate.

        - path: 'README.md'
          instructions: |
              Must include: project description; installation instructions (local and production); available npm commands; environment variables table with names, descriptions, and defaults.
              Follow common Markdown guide conventions for headings and tables.

        - path: 'swagger.json'
          instructions: |
              Must live in the root directory.
              Define a RESTful API schema and be exposed via an /api/docs endpoint using swagger-ui-express.

        - path: 'src/**/cron/*.ts'
          instructions: |
              Place each cron job in src/{module}/cron named as <purpose>.cron.ts in camelCase.
              Use a central manager file to import and start all jobs.
              Extract schedules and parameters to config or environment variables.

        - path: 'src/**/middlewares/*.ts'
          instructions: |
              Store middleware in src/{module}/middlewares named <purpose>.middleware.ts in camelCase.
              Apply logging middleware first, authentication at router level, and error-handling middleware last.

        - path: 'src/**/controllers/*.ts'
          instructions: |
              Controllers must be single-responsibility delegators.
              Document all methods in Swagger definitions.

        - path: 'src/**/gateways/*.ts'
          instructions: |
              Gateway class names must end with Gateway.
              Store in src/{module}/gateways to encapsulate third-party contracts.

        - path: 'src/**/clients/*.ts'
          instructions: |
              Place client integrations under src/{module}/clients for external APIs or libraries.

        - path: 'src/config/*.config.ts'
          instructions: |
              Name config files <domain>.config.ts and locate in src/config.
              Use camelCase keys and load all environment variables here; no business logic.
              Throw errors on missing mandatory configs at startup.

        - path: '**/*.spec.ts'
          instructions: |
              Co-locate tests with source files; use .spec.ts suffix.
              Use Vitest for ES modules projects; Jest for CommonJS.
