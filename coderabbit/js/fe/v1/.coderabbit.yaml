# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: 'en-US'
tone_instructions: give formal and direct reviews with no humour and any other distracting text, only the necessary
chat:
    auto_reply: true
    art: false
reviews:
    profile: 'assertive'
    request_changes_workflow: true
    auto_review:
        enabled: true
        auto_incremental_review: true
        base_branches:
            - '^(?!release).*'
    poem: false
    high_level_summary: true
    suggested_labels: true
    auto_apply_labels: true
    labeling_instructions:
        - label: '⏱️ <10 Min Review'
          instructions: >-
              Apply this label if the pull request modifies fewer than 100 lines.

        - label: '⏱️ 10-30 Min Review'
          instructions: >-
              Apply this label if the pull request modifies between 100 and 500 lines.

        - label: '⏱️ 30-60 Min Review'
          instructions: >-
              Apply this label if the pull request modifies between 500 and 1000 lines.

        - label: '⏱️ 60+ Min Review'
          instructions: >-
              Apply this label if the pull request changes more than 1000 lines.
    path_filters:
        - '!**/*.{pot,po}'
    path_instructions:
        - path: '**/*.js'
          instructions: |
              Prefer ES modules: use import syntax, avoid require; configure type: module in package.json.
              Controllers must delegate to services, contain no business logic, and follow Single Responsibility Principle.

        - path: '**/*.{js,svelte}'
          instructions: |
              Prevent deeply nested callbacks; use async/await or Promises with flat structure.
              Enforce naming conventions: Classes in CamelCase; functions, methods, variables in camelCase (no abbreviations); constants in UPPER_CASE_WITH_UNDERSCORES.
              Document all classes, methods, and functions with JSDoc; descriptions optional if names are self-explanatory.
              Limit functions to a maximum of 4 parameters (never exceed 6); optional parameters must be last; destructure parameters where possible.
              Minimise inline comments; rely on clear naming and required JSDoc for documentation.
              Classes, Functions and Methods must be concise and have descriptive names.
              Code should follow DRY principle, and composition over inheritance.
              Code should follow development best practices.

        - path: '**/*.svelte'
          instructions: |
              Avoid very long Svelte components; prefer splitting parts of the template or business logic into subcomponents.
              Avoid complex Javascript expressions within the template; prefer for complex expressions to be assigned to variables in the script before using in template.
              Avoid overuse of $ reactive statements in Svelte 3 & 4 codebases.
              Document the prop types of components using a single JSDoc block, apart from trivial cases.
              In the <style> block, use nesting as much as possible to scope styles within the root template element's selector, and reduce duplication.
              In the <style> block, avoid writing selectors for elements which don't exist in the template; wrapping those selectors with :global() is acceptable.
