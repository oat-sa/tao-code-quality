# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json
language: 'en-US'
tone_instructions: give formal and direct reviews with no humour and any other distracting text, only the necessary
reviews:
    profile: 'assertive'
    request_changes_workflow: true
    auto_review:
        enabled: true
    poem: false
    high_level_summary: true
    suggested_labels: true
    auto_apply_labels: true
    labeling_instructions:
        - label: '⏱️ <10 Min Review'
          instructions: >-
              Apply this label if the pull request modifies fewer than 50 lines across fewer than 3 files.

        - label: '⏱️ 10-30 Min Review'
          instructions: >-
              Apply this label if the pull request modifies between 50 and 200 lines or affects 3–6 files.

        - label: '⏱️ 30-60 Min Review'
          instructions: >-
              Apply this label if the pull request modifies more than 200 lines or touches 7–15 files.

        - label: '⏱️ 60+ Min Review'
          instructions: >-
              Apply this label if the pull request changes more than 500 lines, affects more than 15 files, or includes architectural changes (e.g. new modules, reorganized structure).
              
    path_instructions:
        - path: '**/*.js'
          instructions: |
              Prevent deeply nested callbacks; use async/await or Promises with flat structure.
              Prefer ES modules: use import syntax, avoid require; configure type: module in package.json; use .mjs for standalone modules if needed.
              Maintain file extension consistency: .mjs for ES-only modules; .cjs for CommonJS where interoperability is required.
              Enforce naming conventions: Classes in CamelCase; functions, methods, variables in camelCase (no abbreviations); constants in UPPER_CASE_WITH_UNDERSCORES.
              Document all classes, methods, and functions with JSDoc; descriptions optional if names are self-explanatory.
              Limit functions to a maximum of 4 parameters (never exceed 6); optional parameters must be last; destructure parameters where possible.
              Controllers must delegate to services, contain no business logic, and follow Single Responsibility Principle.
              Try to avoid comments (keep only essentials).
              Classes, Functions and Methods must be concise and have descriptive names.
              Code should follow DRY and SOLID principles.
              Code should follow development best practices.
chat:
    auto_reply: true
